class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None


class Solution(object):
    def addTwoNumbers(self, l1, l2):
        add_one = False
        skip = False
        skip_last = False
        val_list = []

        while(l2.next != None or add_one == True or l1.next != None):
            combination = l1.val + l2.val
            if add_one:
                combination += 1
                add_one = False
            if(combination >= 10):
                l1_new = combination - 10
                add_one = True
            else:
                l1_new = combination

            val_list.append(l1_new)
            if l1.next == None and l2.next != None:
                l1.next = ListNode(0)
            if l2.next == None and l1.next != None:
                l2.next = ListNode(0)
            if l1.next != None and l2.next != None:
                l2 = l2.next
                l1 = l1.next
            else:
                if add_one:
                    l1.next = ListNode(0)
                    l2.next = ListNode(0)
                    l2 = l2.next
                    l1 = l1.next
                skip_last = True

        if not skip_last:
            combination = l1.val + l2.val
            if(combination >= 10):
                l1_new = combination - 10
                add_one = True
            else:
                l1_new = combination
            val_list.append(l1_new)

            if add_one:
                val_list.append(1)
        returnable_node = ListNode(val_list[0])
        skipped = False
        index = 0
        for node in val_list:
            if skipped:
                temp_node = returnable_node
                while temp_node.next != None:
                    temp_node = temp_node.next
                temp_node.next = ListNode(val_list[index])
            else:
                skipped = True
            index += 1
        return returnable_node

"""
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """

# Test case
l1 = ListNode(2)
l1.next = ListNode(4)
l1.next.next = ListNode(5)

l2 = ListNode(5)
l2.next = ListNode(6)
l2.next.next = ListNode(4)

s = Solution
s.addTwoNumbers(s, l1, l2)